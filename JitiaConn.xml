<?xml version="1.0" encoding="iso-8859-1" ?>
<?xml-stylesheet type="text/xsl" href="stylesheet.xsl" ?>
<Project>
<Name>JitiaFacade</Name>
<FileName>JitiaFacade.vbp</FileName>
<PathFileName>C:\Documents and Settings\CMBJM2\My Documents\Jitia\API\src\JitiaFacade.vbp</PathFileName>
<BuildFileName>JitiaFacade.dll</BuildFileName>
<BuildPathFileName>C:\Documents and Settings\CMBJM2\My Documents\Jitia\API\src\JitiaFacade.dll</BuildPathFileName>
<CompatibleOleServer></CompatibleOleServer>
<Description>JitiaFacade</Description>
<HelpContextID>0</HelpContextID>
<HelpFile></HelpFile>
<StartMode>1</StartMode>
<Type>ActiveX Dll</Type>
<References>
<Reference>
<Name>VBA</Name>
<FileName>msvbvm60.dll</FileName>
<PathFileName>c:\winnt\system32\msvbvm60.dll</PathFileName>
<Description>Visual Basic For Applications</Description>
<BuiltIn>True</BuiltIn>
<Guid>{000204EF-0000-0000-C000-000000000046}</Guid>
<Major>6</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>VBRUN</Name>
<FileName>msvbvm60.dll\3</FileName>
<PathFileName>c:\winnt\system32\msvbvm60.dll\3</PathFileName>
<Description>Visual Basic runtime objects and procedures</Description>
<BuiltIn>True</BuiltIn>
<Guid>{EA544A21-C82D-11D1-A3E4-00A0C90AEA82}</Guid>
<Major>6</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>VB</Name>
<FileName>vb6.olb</FileName>
<PathFileName>c:\program files\microsoft visual studio\vb98\vb6.olb</PathFileName>
<Description>Visual Basic objects and procedures</Description>
<BuiltIn>True</BuiltIn>
<Guid>{FCFB3D2E-A0FA-1068-A738-08002B3371B5}</Guid>
<Major>6</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>stdole</Name>
<FileName>stdole2.tlb</FileName>
<PathFileName>c:\winnt\system32\stdole2.tlb</PathFileName>
<Description>OLE Automation</Description>
<BuiltIn>False</BuiltIn>
<Guid>{00020430-0000-0000-C000-000000000046}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>MTENVIRONMENTLib</Name>
<FileName>mtenvironment.dll</FileName>
<PathFileName>c:\program files\pa\jitia\applications\mtenvironment.dll</PathFileName>
<Description>MTEnvironment 1.0 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{FC8047B1-1F86-11D3-B531-0000E8D3FE0A}</Guid>
<Major>1</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
</References>
<Files>
<File>
<Name>JitiaConn</Name>
<FileName>JitiaConn.cls</FileName>
<PathFileName>C:\Documents and Settings\CMBJM2\My Documents\Jitia\API\src\JitiaConn.cls</PathFileName>
<Type>ClassModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>JitiaConn</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>5</Value>
</Property>
<Property>
<Name>Persistable</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataBindingBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DataSourceBehavior</Name>
<Value>0</Value>
</Property>
<Property>
<Name>MTSTransactionMode</Name>
<Value>0</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>13</CountOfDeclarationLines>
<CountOfLines>273</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>OpenAPI</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine> Methods that use multiple components of the interface</CommentLine>
<CommentLine> -----------------------------------------------------</CommentLine>
<CommentLine> Open an instance of the JitiaConn API, attached to the named model.</CommentLine>
<CommentLine> The ModelFileName must be set in the calling program to be absolute,</CommentLine>
<CommentLine> not relative</CommentLine>
</CommentLines>
<Declaration>Public Sub OpenAPI(ByVal ModelFileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>ModelFileName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CloseAPI</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine> Close this instance of the JitiaConn API</CommentLine>
</CommentLines>
<Declaration>Public Sub CloseAPI()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Simulate</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine> Simulate the model.  If a non-empty ScenarioName is given then a scenario by</CommentLine>
<CommentLine> this name is created, with the supplied comment, if any; the ID of</CommentLine>
<CommentLine> the newly simulated scenario is returned.  If missing, then no</CommentLine>
<CommentLine> scenario is created, but the results can still be accessed using the</CommentLine>
<CommentLine> other methods of this class.</CommentLine>
</CommentLines>
<Declaration>Public Function Simulate(Optional ByVal ScenarioName As String = &quot;&quot;, Optional ByVal ScenarioComment As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>ScenarioName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>ScenarioComment</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetParameterValue</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine> Return the numeric value of a scalar parameter.  If ScenarioID is</CommentLine>
<CommentLine> present, then the parameter value in that scenario is returned.  If</CommentLine>
<CommentLine> it is missing, then the current parameter value is returned.</CommentLine>
</CommentLines>
<Declaration>Public Function GetParameterValue(ByVal ParName As String, Optional ScenarioID) As Double</Declaration>
<Parameters>
<Parameter>
<Name>ParName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ScenarioID</Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>ClearChangesList</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine> Methods that mainly use the EnvPtr</CommentLine>
<CommentLine> ----------------------------------</CommentLine>
<CommentLine> Clear the models&apos;s changes list</CommentLine>
</CommentLines>
<Declaration>Public Sub ClearChangesList()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CompactDB</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine> Compact the model (closes this connection)</CommentLine>
</CommentLines>
<Declaration>Public Sub CompactDB(ByVal FileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>InitializeTempSaveList</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine> Initialize the temporary save list to be empty.</CommentLine>
</CommentLines>
<Declaration>Public Sub InitializeTempSaveList()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetParameterComment</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetParameterComment(ByVal name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>name</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetCurrentParameterValue</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine> Get the current parameter value.  This checks</CommentLine>
<CommentLine> 1. the current changes list,</CommentLine>
<CommentLine> 2. the active data sets, and</CommentLine>
<CommentLine> 3. the model</CommentLine>
<CommentLine> in that order. This function does not work for tables.</CommentLine>
</CommentLines>
<Declaration>Private Function GetCurrentParameterValue(ByVal ParName As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>ParName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>GetJitiaTable</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine>  Get the values in a Jitia table as a variant array.</CommentLine>
<CommentLine>  This comes as (x1, y1, x2, y2, ... )</CommentLine>
</CommentLines>
<Declaration>Public Function GetJitiaTable(ByVal ParamName As String)</Declaration>
<Parameters>
<Parameter>
<Name>ParamName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetJitiaTableAsString</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine>  Get the values in a Jitia table as string.</CommentLine>
<CommentLine>  This comes as &quot;x1,y1,x2,y2&quot;</CommentLine>
</CommentLines>
<Declaration>Public Function GetJitiaTableAsString(ByVal ParamName As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>ParamName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>GetDefaultParameterValue</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine> Get the default value of a parameter, i.e. the value in the model.</CommentLine>
<CommentLine> Datasets are ignored.</CommentLine>
</CommentLines>
<Declaration>Public Function GetDefaultParameterValue(ByVal ParName As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>ParName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>SetJitiaTable</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine> Set the values in a Jitia table with a variant array.</CommentLine>
<CommentLine> This is passed as (x1, y1, x2, y2, ... )</CommentLine>
</CommentLines>
<Declaration>Sub SetJitiaTable(ByVal TableName As String, TableValues() As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>TableName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>TableValues()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetJitiaTableWithString</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine> Set the values in a Jitia table with a string.</CommentLine>
<CommentLine> This is passed as &quot;x1,y1,x2,y2,...&quot;</CommentLine>
</CommentLines>
<Declaration>Sub SetJitiaTableWithString(ByVal TableName As String, ByVal TableValues As String)</Declaration>
<Parameters>
<Parameter>
<Name>TableName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>TableValues</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetParameterValue</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine> Set the value of a scalar parameter.  This becomes part of the</CommentLine>
<CommentLine> current changes list.</CommentLine>
</CommentLines>
<Declaration>Public Sub SetParameterValue(ByVal ParName As String, ByVal ParValue As Single)</Declaration>
<Parameters>
<Parameter>
<Name>ParName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ParValue</Name>
<Type>Single</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ApplyScenarioParameterValues</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine> Methods mainly using scenarios</CommentLine>
<CommentLine> ------------------------------</CommentLine>
<CommentLine> Add the parameter settings from the specified scenario to the</CommentLine>
<CommentLine> current changes list.</CommentLine>
</CommentLines>
<Declaration>Sub ApplyScenarioParameterValues(ScenarioID As Long)</Declaration>
<Parameters>
<Parameter>
<Name>ScenarioID</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DeleteScenario</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
<CommentLine> Delete the supplied scenario.</CommentLine>
</CommentLines>
<Declaration>Public Sub DeleteScenario(ByVal ScenarioID As Long)</Declaration>
<Parameters>
<Parameter>
<Name>ScenarioID</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetScenarioParameterValue</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function GetScenarioParameterValue(ByVal ParName As String, ByVal ScenarioID As Long) As Double</Declaration>
<Parameters>
<Parameter>
<Name>ParName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ScenarioID</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>GetScenarioIDByName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine> Return the numeric ID for the named scenario.  Not clear what is</CommentLine>
<CommentLine> returned if there are two scenarios with the same comment</CommentLine>
</CommentLines>
<Declaration>Public Function GetScenarioIDByName(ByVal ScenarioName As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>ScenarioName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>SimulateScenario</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine> Simulate a scenario with the supplied name and comment.  Returns the</CommentLine>
<CommentLine> numeric ID of the newly-simulated scenario</CommentLine>
</CommentLines>
<Declaration>Private Function SimulateScenario(ByVal ScenarioName As String, ByVal ScenarioComment As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>ScenarioName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ScenarioComment</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>ReferenceScenario</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get ReferenceScenario() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>ReferenceScenario</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let ReferenceScenario(s As Long)</Declaration>
<Parameters>
<Parameter>
<Name>s</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CurrentScenario</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get CurrentScenario() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>CurrentScenario</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let CurrentScenario(s As Long)</Declaration>
<Parameters>
<Parameter>
<Name>s</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TempSaveListAdd</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine> Methods using temporary save lists</CommentLine>
<CommentLine> ----------------------------------</CommentLine>
<CommentLine> Add the named variable to the active temporary save list, for light</CommentLine>
<CommentLine> simulations.</CommentLine>
</CommentLines>
<Declaration>Public Sub TempSaveListAdd(ByVal VarName As String)</Declaration>
<Parameters>
<Parameter>
<Name>VarName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SimulateTempSaveList</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine> Simulate the model, but do not store the results in a scenario.</CommentLine>
<CommentLine> Changes the active simulaton result set. The results can be read</CommentLine>
<CommentLine> with other methods in this class.</CommentLine>
</CommentLines>
<Declaration>Private Sub SimulateTempSaveList()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetTimeArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine> Methods to set and view results.</CommentLine>
<CommentLine> --------------------------------</CommentLine>
<CommentLine></CommentLine>
<CommentLine> These use the active m_Result object.  At most one may be active at</CommentLine>
<CommentLine> any one time.  The value of this is changed by either running a</CommentLine>
<CommentLine> simulation or calling SetResultByScenarioID</CommentLine>
<CommentLine> Get the saved times for the active simulation result set.</CommentLine>
</CommentLines>
<Declaration>Public Function GetTimeArray() As Variant</Declaration>
<Parameters>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetVarArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine> Get the saved values for the specified variable in the active</CommentLine>
<CommentLine> simulation result set</CommentLine>
</CommentLines>
<Declaration>Public Function GetVarArray(ByVal VarName As String) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>VarName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetCustomVarArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine> Get the values for the specified variable in the active simulation</CommentLine>
<CommentLine> result set, at the specified time.  Do not know what happens if the</CommentLine>
<CommentLine> timearray values are not among the simulation save times.</CommentLine>
</CommentLines>
<Declaration>Public Function GetCustomVarArray(ByVal VarName As String, ByVal TimeArray) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>VarName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>TimeArray</Name>
<Type></Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>GetEndingVarValue</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
<CommentLine> Get the ending value of the specified variable in the active</CommentLine>
<CommentLine> simulation result set.</CommentLine>
</CommentLines>
<Declaration>Public Function GetEndingVarValue(ByVal VarName As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>VarName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>SetResult</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
<CommentLine> Set the active simulaton result set</CommentLine>
</CommentLines>
<Declaration>Private Sub SetResult(Result As Object)</Declaration>
<Parameters>
<Parameter>
<Name>Result</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetResultByScenarioID</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine> Set the active simulation result set to be that specified by the</CommentLine>
<CommentLine> supplied scenario ID.  Do not know what happens if the simulated</CommentLine>
<CommentLine> results have been deleted.</CommentLine>
</CommentLines>
<Declaration>Public Sub SetResultByScenarioID(ScenarioID As Long)</Declaration>
<Parameters>
<Parameter>
<Name>ScenarioID</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ExcludeSubs</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine> Utility methods start here</CommentLine>
<CommentLine> --------------------------</CommentLine>
<CommentLine> Returns the non-subscripted part of a possibly subscripted variable</CommentLine>
<CommentLine> name</CommentLine>
</CommentLines>
<Declaration>Private Function ExcludeSubs(ByRef VarName)</Declaration>
<Parameters>
<Parameter>
<Name>VarName</Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : JitiaConn</CommentLine>
<CommentLine> DateTime  : 12/17/2003 14:32</CommentLine>
<CommentLine> Author    : Jonathan Moore</CommentLine>
<CommentLine> Purpose   : Provides a simple &apos;numbers-in/numbers-out&apos; interface to much</CommentLine>
<CommentLine>             of Jitia&apos;s simulation capability.</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>JitiaFacadeTest</Name>
<FileName>JitiaFacadeTest.bas</FileName>
<PathFileName>C:\Documents and Settings\CMBJM2\My Documents\Jitia\API\src\JitiaFacadeTest.bas</PathFileName>
<Type>StdModule</Type>
<Description></Description>
<HelpContextID>0</HelpContextID>
<Properties>
<Property>
<Name>Name</Name>
<Value>JitiaFacadeTest</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>57</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>test1</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Sub test1()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>test2</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Sub test2()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>test3</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Sub test3()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
</Files>
</Project>
